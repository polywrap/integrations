#import { Signature, SignedTransaction, FinalExecutionOutcome, ExecutionStatus, ExecutionOutcome, ExecutionOutcomeWithId } into Near from "wrap://ens/near.interface.polywrap.eth"

type Module {
  getConfig: ConnectionConfig!

  requestSignIn(
    contractId: String
    methodNames: [String!]
    successUrl: String
    failureUrl: String
  ): Boolean!

  signOut: Boolean!

  isSignedIn: Boolean!

  getAccountId: String

  getPublicKey(
    accountId: String!
  ): PublicKey

  signMessage(
    message: Bytes!
    signerId: String!
  ): Near_Signature!

  createTransactionWithWallet(
    receiverId: String!
    actions: [Near_Action!]!
  ): Near_Transaction!

  # send one or more transactions to NEAR wallet to be signed and executed
  requestSignTransactions(
    # list of transactions to sign
    transactions: [Near_Transaction!]!
    # url NEAR Wallet will redirect to after transaction signing is complete
    callbackUrl: String
    # meta information NEAR Wallet will send back to the application. `meta` will be attached to the `callbackUrl` as a url search param
    meta: String
  ): Boolean!

  createKey(
    accountId: String!
    networkId: String!
  ): PublicKey!
}

type ConnectionConfig {
  networkId: String!
  nodeUrl: String!
  helperUrl: String
  indexerServiceUrl: String
}
# Account public key data
type PublicKey {
  keyType: UInt8!
  data: Bytes!
}

type Transaction {
  signerId: String!
  publicKey: PublicKey!
  nonce: BigInt!
  receiverId: String!
  actions: [Action!]!
  blockHash:  Bytes
}

# Access key permissions determine how an account is allow to interact with a contract
type AccessKeyPermission {
  _: String
  receiverId: String
  methodNames: [String!]
  allowance: BigInt
}

# Full access permission allows an account to call all public contract functions
type FullAccessPermission {
  _:String!
}

# Function call permissions describe which contract functions an account can call
type FunctionCallPermission {
  receiverId: String!
  methodNames: [String!]!
  allowance: BigInt
}

type AccessKey {
  nonce: BigInt!
  permission: AccessKeyPermission! #| FullAccessPermission | FunctionCallPermission
}

# Access keys contain access key permissions, which determine how an account is allowed to interact with a contract
type AccessKeyInfo {
  publicKey: PublicKey!
  accessKey: AccessKey!
}

# Action types define the data necessary to complete a type of action in a transaction
type Action {
  code: Bytes
  methodName: String
  args: Bytes
  gas: BigInt
  deposit: BigInt
  stake: BigInt
  publicKey: PublicKey
  accessKey: AccessKey
  beneficiaryId: String
}

# TODO switch to union type after support
# holds content necessary to create an account


# TODO: accept "args" property as JSON object
type FunctionCall implements Action {} # methodName: String! args: Bytes! gas: BigInt! deposit: BigInt!

# holds content necessary to send a transaction that stakes NEAR
type Stake implements Action {} # stake: BigInt! publicKey: PublicKey!
# holds content necessary to send a transaction that deletes an access key
type DeleteKey implements Action {} # publicKey: PublicKey!
# holds content necessary to send a transaction that creates a NEAR account
type DeleteAccount implements Action {} # beneficiaryId: String!

type CreateAccount  {
}

type AddKey {
  publicKey: PublicKey!
  accessKey: AccessKey!
}

# holds content necessary to send a transaction that deploys a contract
type DeployContract {
  code: Bytes!
}
# holds content necessary to send a transaction that transfers NEAR?
type Transfer {
  deposit: BigInt!
}

type Signature {
  keyType: UInt8!
  data: Bytes!
}

type SignedTransaction {
  transaction: Transaction!
  signature: Signature!
}

# Return value of Mutation.signTransaction(...); contains transaction hash and signed transaction
type SignTransactionResult {
  hash: Bytes!
  signedTx: SignedTransaction!
}

