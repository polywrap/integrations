type Query {
  """
  Wallet Query Functions (Implemented, Not Tested)
  """

  requestSignIn(
    contractId: String
    methodNames: [String!]
    successUrl: String
    failureUrl: String
  ): Boolean!

  signOut: Boolean!

  isSignedIn: Boolean!

  getAccountId: String
  
  """
  Creates a transaction.
  If signerId is provided, the transaction will be signed using data from the KeyStore in the plugin config.
  Otherwise, wallet authorization is expected.
  """
  createTransactionWithWallet(
    receiverId: String!
    actions: [Action!]!
  ): Transaction!


  """
  KeyStore, KeyPair, and Signer Query Functions (Implemented, Tested)
  """

  getPublicKey(
    accountId: String!
  ): PublicKey

  """
  KeyStore, KeyPair, and Signer Query Functions (Implemented, Tested)
  """

  signMessage(
    message: Bytes!
    signerId: String!
  ): Signature!
}

type Mutation {

  """
  Generic Functions (Implemented, Tested)
  """

  sendJsonRpc(
    method: String!
    params: JSON!
  ): JSON!

  """
  Wallet Mutation Functions (Implemented, Not Tested)
  """

  # send one or more transactions to NEAR wallet to be signed and executed
  requestSignTransactions(
    # list of transactions to sign
    transactions: [Transaction!]!
    # url NEAR Wallet will redirect to after transaction signing is complete
    callbackUrl: String
    # meta information NEAR Wallet will send back to the application. `meta` will be attached to the `callbackUrl` as a url search param
    meta: String
  ): Boolean!

  """
  KeyStore, KeyPair, and Signer Query Functions (Implemented, Tested)
  """

  createKey(
    accountId: String!
    networkId: String!
  ): PublicKey!
}

"""
Plugin Types (can be imported by Polywrapper to prevent redundancy)
"""

# Supported public key types
enum KeyType {
  ed25519
}

# Account public key data
type PublicKey {
  keyType: KeyType!
  data: Bytes!
}

# holds content necessary to create an account
type CreateAccount {}
# holds content necessary to send a transaction that deploys a contract
type DeployContract { code: Bytes! }
# holds content necessary to send a transaction that calls a contract function
type FunctionCall { methodName: String! args: JSON gas: BigInt! deposit: BigInt! }
# holds content necessary to send a transaction that transfers NEAR?
type Transfer { deposit: BigInt! }
# holds content necessary to send a transaction that stakes NEAR
type Stake { stake: BigInt! publicKey: PublicKey! }
# holds content necessary to send a transaction that adds an access key
type AddKey { publicKey: PublicKey! accessKey: AccessKey! }
# holds content necessary to send a transaction that deletes an access key
type DeleteKey { publicKey: PublicKey! }
# holds content necessary to send a transaction that creates a NEAR account
type DeleteAccount { beneficiaryId: String! }
# Action types define the data necessary to complete a type of action in a transaction
type Action = ( CreateAccount | DeployContract | FunctionCall | Transfer | Stake | AddKey | DeleteKey | DeleteAccount)!

type Transaction {
  signerId: String!
  publicKey: PublicKey!
  nonce: BigInt!
  receiverId: String!
  actions: [Action!]!
  blockHash:  Bytes
  hash: String
}

type Signature {
  keyType: KeyType!
  data: Bytes!
}